}
plotSurface(-100, 100, -100, 100, 20, plotThis, F, theta=-120, zlab = "z", xlab = "x1", ylab = "x2")
betas
# sample q(x_{mis} | x_{obs}, y)
#TODO edit TeX and mention how you "neutralized scale bit" and how this
# is different from curen thinking
# maybe try to seek to explain why there is a "quicksand" effect
# with this particular thing going on
propose_missdata_given_params <- function(y, alpha){
list(x2mis = rt(numMissingEachGroup, df = 3))
#list(x2mis = rt(numMissingEachGroup, df = 10)*sqrt(alpha))
}
# eval log q(x_{mis} | x_{obs}, y)
logMissingDataProposal <- function(x2mis, alpha){
sum(dt(x = x2mis, df = 3, log = T))
#sum(dt.scaled(x = x2mis, df = 10, sd = sqrt(alpha), log = T))
}
logCondLikes <- function(xmis, beta){
# insert simulated data into missing data spots
X[is.na(X[,2])] <- xmis
X <- cbind(rep(1,numRows), X)
stopifnot(sum(is.na(X))==0)
linked_means <- as.vector(X %*% as.matrix(beta))
logLogisticRegCndtlLike(y, linked_means)
}
logMissingProbs <- function(M, xmis, phis){
X[is.na(X[,2])] <- xmis
X <- cbind(rep(1,numRows), X)
stopifnot(is.matrix(M))
stopifnot(dim(M)[1] == numRows)
stopifnot(dim(M)[2] == 2)
stopifnot(sum(is.na(X))==0)
linked_means <- as.vector(X %*% as.matrix(phis))
logLogisticRegCndtlLike(M[,2], linked_means)
}
logMissingDataProbs <- function(xmis, alpha){
sum(dnorm(xmis, 0, sd = sqrt(alpha), log = T))
}
# log p(m|y, xmis, xobs, phi) + log p(y|xmis,xobs,beta) + log p(xmis|xobs,alpha) - log q(xmis|xobs,y,alpha,beta)
getOneLogSummandWithChosenX <- function(alpha, beta, phis, y, x1, x2){
Xmis <- propose_missdata_given_params(y, alpha)
Xmis$x2mis[1] <- x1
Xmis$x2mis[2] <- x2
logLikes <- logCondLikes(Xmis$x2mis, beta)
logpmweights <- logMissingProbs(M, Xmis$x2mis, phis)
logMissXProbs <- logMissingDataProbs(Xmis$x2mis, alpha)
logQs <- logMissingDataProposal(Xmis$x2mis, alpha)
sum(logLikes+logpmweights+logMissXProbs-logQs)
}
getLogImpSampEst <- function(alphaVec, betaVec, phiVec, x1, x2, N=100){
#samps <- replicate(N, getOneLogSummandWithChosenX(alphaVec, betaVec, phiVec, y, x1, x2))
samps <- getOneLogSummandWithChosenX(alphaVec, betaVec, phiVec, y, x1, x2)
matrixStats::logSumExp(samps-log(N))
}
#### consrruct the plot
# hat{p}(m,y, xmis | xobs, alpha, beta, phi)
plotThis <- function(xmis1, xmis2)
{
# alpha, beta, phi, xobs, y, m from above
# hardcoded N
N <- 10
logMissingDataProposal(c(xmis1, xmis2), alpha) + getLogImpSampEst(alpha, betas, phis, xmis1, xmis2, N)
}
plotSurface(-100, 100, -100, 100, 20, plotThis, F, theta=-120, zlab = "z", xlab = "x1", ylab = "x2")
source('~/pmglm/code/plot_fake_data_sim_like.r')
source('~/pmglm/code/plot_fake_data_sim_like.r')
source('~/pmglm/code/plot_fake_data_sim_like.r')
source('~/pmglm/code/plot_fake_data_sim_like.r')
y
numMissingEachGroup
numColsWithMiss <- sum(colSums(mis) != 0)
M
source('~/pmglm/code/plot_fake_data_sim_like.r')
source('~/pmglm/code/plot_fake_data_sim_like.r')
numMissingEachGroup
numRows <- 4
betas <- c(1, -2, 3)
alpha <- 10.1
phis <- c(1, 1, 1)
source('~/pmglm/code/plot_fake_data_sim_like.r')
source('~/pmglm/code/plot_fake_data_sim_like.r')
source('~/pmglm/code/plot_fake_data_sim_like.r')
source('~/pmglm/code/plot_fake_data_sim_like.r')
?persp
plotThis(0,0)
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(-100,-10))
plotThis(0,0)
plotThis(-100,-100)
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(-500,-10))
plotThis(-1000,-1000)
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(-11000,-10))
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(-15000,-10))
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(-14000,-10))
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(-20000,-10))
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(-18000,-10))
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(-15000,-10))
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(-16000,-10))
source('~/pmglm/code/plot_fake_data_sim_like.r')
source('~/pmglm/code/plot_fake_data_sim_like.r')
#' @param lowerSecond lower bound of y axis
#' @param upperSecond upper bound of y axis
#' @param numGridPointsOnEachAxis how many grid points do you want on each axis
#' @param f the function that takes two scalar arguments (x and y) and produces one scalar argument (z)
#' @param contour do you want a contour plot? (True or False)
#' @param ... extra arguments to be passed to graphics::contour() or graphics::persp() (depending on what contour arg was set to)
#' @keywords plotting 3D 3-D 3d
#' @export
#' @examples
#' plotSurface(-50, 50, 0.0001, 50, 20, eval_log_unnormalized_posterior, F, theta=-120, zlab = "log unnorm dens", xlab = "mu", ylab = "ss")
plotSurface <- function(lowerFirst, upperFirst, lowerSecond, upperSecond,
numGridPointsOnEachAxis, f, contour = F, ...)
{
A <- seq(lowerFirst, upperFirst, length.out = numGridPointsOnEachAxis)
B <- seq(lowerSecond, upperSecond, length.out = numGridPointsOnEachAxis)
args <- expand.grid(A,B)
z <- mapply(f, args[,1], args[,2])
dim(z) <- c(length(A), length(B))
if(contour){
graphics::contour(A, B, z, ...)
}else{
graphics::persp(x=A, y=B, z=z, ...)
}
}
source('~/pmglm/code/plot_fake_data_sim_like.r')
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(0,10))
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2")
source('~/pmglm/code/plot_fake_data_sim_like.r')
source('~/pmglm/code/plot_fake_data_sim_like.r')
plotThis(1,1)
plotThis(-100,-100)
plotThis(0,0)
#### consrruct the plot
# hat{p}(m,y, xmis | xobs, alpha, beta, phi)
plotThis <- function(xmis1, xmis2)
{
# alpha, beta, phi, xobs, y, m from above
# hardcoded N
N <- 1
logMissingDataProposal(c(xmis1, xmis2), alpha) + getLogImpSampEst(alpha, betas, phis, xmis1, xmis2, N)
}
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2")
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(-15000,-15))
source('~/pmglm/code/plot_fake_data_sim_like.r')
plotThis(-1000,-1000)
plotThis(0,0)
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(-15000,0))
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(-150000,0))
plotSurface(-1000, 1000, -1000, 1000, 30,
plotThis, F, theta=-120,
zlab = "z", xlab = "x1", ylab = "x2",
zlim = c(-1500000,0))
install.packages("Rcpp")
library(Rcpp)
gslrng <-
'int seed = Rcpp::as<int>(par) ;
gsl_rng_env_setup();
gsl_rng *r = gsl_rng_alloc (gsl_rng_default);
gsl_rng_set (r, (unsigned long) seed);
double v = gsl_rng_get (r);
gsl_rng_free(r);return Rcpp::wrap(v);'
plug <- Rcpp:::Rcpp.plugin.maker(
include.before = "#include <gsl/gsl_rng.h>",
libs = paste("-L/usr/local/lib/R/site-library/Rcpp/lib -lRcpp",
"-Wl,-rpath,/usr/local/lib/R/site-library/Rcpp/lib",
"-L/usr/lib -lgsl -lgslcblas -lm"))
registerPlugin("gslDemo", plug )
fun <- cxxfunction(signature(par="numeric"), gslrng, plugin="gslDemo")
library(inline)
gslrng <-
'int seed = Rcpp::as<int>(par) ;
gsl_rng_env_setup();
gsl_rng *r = gsl_rng_alloc (gsl_rng_default);
gsl_rng_set (r, (unsigned long) seed);
double v = gsl_rng_get (r);
gsl_rng_free(r);return Rcpp::wrap(v);'
plug <- Rcpp:::Rcpp.plugin.maker(
include.before = "#include <gsl/gsl_rng.h>",
libs = paste("-L/usr/local/lib/R/site-library/Rcpp/lib -lRcpp",
"-Wl,-rpath,/usr/local/lib/R/site-library/Rcpp/lib",
"-L/usr/lib -lgsl -lgslcblas -lm"))
registerPlugin("gslDemo", plug )
fun <- cxxfunction(signature(par="numeric"), gslrng, plugin="gslDemo")
.libPaths()
gslrng <-
'int seed = Rcpp::as<int>(par) ;
gsl_rng_env_setup();
gsl_rng *r = gsl_rng_alloc (gsl_rng_default);
gsl_rng_set (r, (unsigned long) seed);
double v = gsl_rng_get (r);
gsl_rng_free(r);return Rcpp::wrap(v);'
plug <- Rcpp:::Rcpp.plugin.maker(
include.before = "#include <gsl/gsl_rng.h>",
libs = paste("-L/usr/local/lib/R/site-library/Rcpp/lib -lRcpp",
"-Wl,-rpath, /home/t/R/x86_64-pc-linux-gnu-library/3.6/Rcpp/lib",
"-L/usr/lib -lgsl -lgslcblas -lm"))
registerPlugin("gslDemo", plug )
fun <- cxxfunction(signature(par="numeric"), gslrng, plugin="gslDemo")
plug <- Rcpp:::Rcpp.plugin.maker(
include.before = "#include <gsl/gsl_rng.h>",
libs = paste("-L/usr/local/lib/R/site-library/Rcpp/lib -lRcpp",
"-Wl,-rpath, /home/t/R/x86_64-pc-linux-gnu-library/3.6/Rcpp/libs",
"-L/usr/lib -lgsl -lgslcblas -lm"))
registerPlugin("gslDemo", plug )
fun <- cxxfunction(signature(par="numeric"), gslrng, plugin="gslDemo")
?cxxfunction
library('rvest')
install.packages("rvest")
library('rvest')
le_url <- "https://www.bluenile.com/diamonds/round-cut?track=DiaSearchRDmodrn"
webpage <- read_html(url)
webpage <- read_html(le_url)
names(webpage)
?html_nodes
rank_data_html <- html_nodes(webpage,'.single-cell')
shape_data_html <- html_nodes(webpage,'.single-cell')
#Converting the shape data to text
shape_data <- html_text(shape_data_html)
#Let's have a look at the rankings
head(shape_data)
carat_data_html <- html_nodes(webpage,'.carat')
le_url <- "https://www.bluenile.com/diamonds/round-cut?track=DiaSearchRDmodrn"
webpage <- read_html(le_url)
shape_data_html <- html_nodes(webpage,'.single-cell')
price_data_html <- html_nodes(webpage,'.price')
carat_data_html <- html_nodes(webpage,'.carat')
cut_data_html <- html_nodes(webpage,'.cell-wrapper')
color_data_html <- html_nodes(webpage,'.color')
clarity_data_html <- html_nodes(webpage,'.clarity')
haed(shape_data_html)
head(shape_data_html)
shape_data_html
#Converting data to text
shape_data <- html_text(shape_data_html)
price_data <- html_text(price_data_html)
carat_data <- html_text(carat_data_html)
cut_data <- html_text(cut_data_html)
color_data <- html_text(color_data_html)
clarity_data <- html_text(clarity_data_html)
#Let's have a look at the rankings
head(shape_data)
#Let's have a look at the rankings
le_df <- data.frame(shape_data, price_data, carat_data, cut_data, color_data, clarity_data)
head(clarity_data)
head(color_data)
#Converting data to text
shape_data <- html_text(shape_data_html)
price_data <- html_text(price_data_html)
carat_data <- html_text(carat_data_html)
cut_data <- html_text(cut_data_html)
color_data <- html_text(color_data_html)[-1]
clarity_data <- html_text(clarity_data_html)[-1]
#Let's have a look at the rankings
le_df <- data.frame(shape_data, price_data, carat_data, cut_data, color_data, clarity_data)
#Converting data to text
shape_data <- html_text(shape_data_html)
price_data <- html_text(price_data_html)
carat_data <- html_text(carat_data_html)
cut_data <- html_text(cut_data_html)
color_data <- html_text(color_data_html)
clarity_data <- html_text(clarity_data_html)
head(shape_data)
head(price_data)
head(carat_data)
head(cut_data)
head(color_data)
#Converting data to text
shape_data <- html_text(shape_data_html)
price_data <- html_text(price_data_html)[-1]
carat_data <- html_text(carat_data_html)[-1]
cut_data <- html_text(cut_data_html)
color_data <- html_text(color_data_html)[-1]
clarity_data <- html_text(clarity_data_html)[-1]
#Let's have a look at the rankings
le_df <- data.frame(shape_data, price_data, carat_data, cut_data, color_data, clarity_data)
head(shape_data)
#Converting data to text
shape_data <- html_text(shape_data_html)
price_data <- html_text(price_data_html)[-2]
carat_data <- html_text(carat_data_html)[-2]
cut_data <- html_text(cut_data_html)
color_data <- html_text(color_data_html)[-2]
clarity_data <- html_text(clarity_data_html)[-2]
#Let's have a look at the rankings
le_df <- data.frame(shape_data, price_data, carat_data, cut_data, color_data, clarity_data)
shape_data_html <- html_nodes(webpage,'.single-cell')
price_data_html <- html_nodes(webpage,'.price')
carat_data_html <- html_nodes(webpage,'.carat')
cut_data_html <- html_nodes(webpage,'.cell-wrapper')
color_data_html <- html_nodes(webpage,'.color')
clarity_data_html <- html_nodes(webpage,'.clarity')
#Converting data to text
shape_data <- html_text(shape_data_html)
price_data <- html_text(price_data_html)[-2]
carat_data <- html_text(carat_data_html)[-2]
cut_data <- html_text(cut_data_html)
color_data <- html_text(color_data_html)[-2]
clarity_data <- html_text(clarity_data_html)[-2]
le_url <- "https://www.bluenile.com/diamonds/round-cut?track=DiaSearchRDmodrn"
webpage <- read_html(le_url)
shape_data_html <- html_nodes(webpage,'.single-cell')
price_data_html <- html_nodes(webpage,'.price')
carat_data_html <- html_nodes(webpage,'.carat')
cut_data_html <- html_nodes(webpage,'.cell-wrapper')
color_data_html <- html_nodes(webpage,'.color')
clarity_data_html <- html_nodes(webpage,'.clarity')
shape_data_html <- html_nodes(webpage,'.shape')
#Converting data to text
shape_data <- html_text(shape_data_html)
length(shape_data)
cut_data_html <- html_nodes(webpage,'.cut')
cut_data <- html_text(cut_data_html)
shape_data_html <- html_nodes(webpage,'.shape')
price_data_html <- html_nodes(webpage,'.price')
carat_data_html <- html_nodes(webpage,'.carat')
cut_data_html <- html_nodes(webpage,'.cut')
color_data_html <- html_nodes(webpage,'.color')
clarity_data_html <- html_nodes(webpage,'.clarity')
#Converting data to text
shape_data <- html_text(shape_data_html)
price_data <- html_text(price_data_html)
carat_data <- html_text(carat_data_html)
cut_data <- html_text(cut_data_html)
color_data <- html_text(color_data_html)
clarity_data <- html_text(clarity_data_html)
#Let's have a look at the rankings
le_df <- data.frame(shape_data, price_data, carat_data, cut_data, color_data, clarity_data)
head(le_df)
#Let's have a look at the rankings
le_df <- cbind(shape_data, price_data, carat_data, cut_data, color_data, clarity_data, )
#Let's have a look at the rankings
le_df <- cbind(shape_data, price_data, carat_data, cut_data, color_data, clarity_data)
head(le_df)
#Let's have a look at the rankings
le_mat <- cbind(shape_data, price_data, carat_data, cut_data, color_data, clarity_data)
le_df <- le_mat[-1,]
colnames(le_df) <- le_mat[1,]
head(le_df)
nrow(le_df)
dd <- read.csv("~/UVa/all_teaching/summer19_6021/project1/clean_diamond_data.csv")
head(dd)
dd$logprice <- log(dd$price)
dd$logprice <- log(dd$price)
dd$logcarat <- log(dd$carat)
mod <- lm(logprice ~ . - carat, data = dd)
summary(mod)
colnames(dd)
head(dd$clarity)
unique(dd$clarity)
unique(dd$color)
unique(dd$cut)
x1 <- dat.frame(logcarat = log(.8), clarity = "SI1", color = "J", cut = "Ideal")
x1 <- data.frame(logcarat = log(.8), clarity = "SI1", color = "J", cut = "Ideal")
predict(object = mod, newdata = x1)
x1 <- data.frame(logcarat = log(.8), clarity = "SI1", color = "J", cut = "Ideal")
predict(object = mod, newdata = x1)
x1 <- data.frame(logcarat = log(.8), carat = .8, clarity = "SI1", color = "J", cut = "Ideal")
predict(object = mod, newdata = x1)
x1 <- data.frame(logcarat = log(.8), carat = .8, clarity = "SI1", color = "J", cut = "Ideal", price = 1)
predict(object = mod, newdata = x1)
exp(predict(object = mod, newdata = x1))
upper("SI1")
toupper("a")
function(carat, clarity, color, cut){
x1 <- data.frame(logcarat = log(carat), carat = carat,
clarity = toupper(clarity), color = toupper(color),
cut = cut, price = 1)
exp(predict(object = mod, newdata = x1))
}
getExpecPrice <- function(carat, clarity, color, cut){
x1 <- data.frame(logcarat = log(carat), carat = carat,
clarity = toupper(clarity), color = toupper(color),
cut = cut, price = 1)
exp(predict(object = mod, newdata = x1))
}
getExpecPrice(.8, "SI1", "I", "Ideal")
getExpecPrice(.8, "SI1", "I", "Ideal") + 2*getExpecPrice(.62/2, "SI1", "I", "Ideal")
getExpecPrice(.8, "SI1", "I", "Ideal") + 2*getExpecPrice(.62/2, "SI1", "I", "Ideal") + 100
getExpecPrice(.8, "SI1", "I", "Ideal") + 2*getExpecPrice(.62/2, "SI1", "I", "Ideal") + 1000
getExpecPrice(.8, "SI1", "I", "Ideal") + 2*getExpecPrice(.62/2, "SI1", "I", "Ideal")
getExpecPrice(1.8, "SI1", "I", "Ideal") + 2*getExpecPrice(1.62/2, "SI1", "I", "Ideal")
getExpecPrice(1.1, "SI1", "I", "Ideal") + 2*getExpecPrice(.8/2, "SI1", "I", "Ideal")
?subset()
subset(dd, 1 < carat)
head(dd)
subset(dd, 1 < carat, clarity == "SI1", color = "I", cut == "Ideal")
subset(dd, 1 < carat, clarity == "SI1", color == "I", cut == "Ideal")
subset(dd, 1 < carat, clarity == "SI1", color == "I", cut == "Ideal")
?subset
setwd("~/UVa/all_teaching/summer19_6021/presentations/")
library(rmarkdown)
render_site()
render_site()
120*2
120*2/13
15*13
15*15
df <- read.csv("~/UVa/all_teaching/summer19_6021/project2/nondeletedposts.csv")
colnames(df)
table(df$AcceptedAnswerId)
df$AcceptedAnswerId
!is.na(df$AcceptedAnswerId)
df <- read.csv("~/UVa/all_teaching/summer19_6021/project2/nondeletedposts.csv")
df$y <- !is.na(df$AcceptedAnswerId)
df <- read.csv("~/UVa/all_teaching/summer19_6021/project2/nondeletedposts.csv")
df <- df[seq(1,nrow(df), 10),] # just temporary to make things faster while I'm testing things out
df$y <- !is.na(df$AcceptedAnswerId)
hist(df$ViewCount)
sum(is.na(df$ViewCount))
df$Body[1]
length(df$Body)
nrow(df)
nchar(df$Body[1])
class(df$Body[1])
df <- read.csv("~/UVa/all_teaching/summer19_6021/project2/nondeletedposts.csv", stringsAsFactors = F)
df <- df[seq(1,nrow(df), 10),] # just temporary to make things faster while I'm testing things out
df$y <- !is.na(df$AcceptedAnswerId)
class(df$Body[1])
nchar(df$Body[1])
df$numCharInQuestion <- sapply(df$Body, nchar)
plot(df$numCharInQuestion, df$y)
summary(glm(y ~ numCharInQuestion, data =df, family = binomial()))
df$numCharInQuestion <- sapply(df$Body, function(text) log(nchar(text)))
plot(df$numCharInQuestion, df$y)
summary(glm(y ~ numCharInQuestion, data =df, family = binomial()))
df$numCharInQuestion <- sapply(df$Body, nchar)
sum(is.na(df$numCharInQuestion))
table(df$numCharInQuestion)
hist(df$numCharInQuestion)
df$logNumChar <- log(df$numCharInQuestion)
summary(glm(y ~ logNumChar, data =df, family = binomial()))
sum(is.na(df$y))
df$logNumChar
max(df$logNumChar)
min(df$logNumChar)
df$logNumChar <- log(df$numCharInQuestion+.001)
summary(glm(y ~ logNumChar, data = df, family = binomial()))
hist(df$logNumChar)
?multinom
library(nnet)
?multinom
?glm
?vcov
?glm
?binomial
?glm
expand.grid(0:1, 0:1, 0:1)
fakeMatrix <- matrix(rnorm(3*10), ncol=3)
fakeMatrix
for(i in (1:2^3))
i
for(i in (1:2^3))
print(i)
for(i in (1:2^3))
expand.grid(1:2,1:2,1:2)
for(row in (1:2^3)){
expand.grid(1:2,1:2,1:2)[row,]
}
for(row in (1:2^3)){
print(expand.grid(1:2,1:2,1:2)[row,])
}
for(row in (1:2^3)){
print(
expand.grid(1:2,1:2,1:2)[row,]
)
}
apply(expand.grid(1:2,1:2,1:2), 2, print)
expand.grid(1:2,1:2,1:2)
?apply
apply
