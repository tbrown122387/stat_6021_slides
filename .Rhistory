?predict.glm
library(foreign) # for read.dta() to read in STATA files
library(nnet) # for multinom()
ml <- read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
head(ml, n = 3)
with(ml, table(prog)) #prog is our y variable
with(ml, summary(write)) # second x
ml$prog2 <- relevel(ml$prog, ref = "academic") #specify academic as baseline/0
myModel <- multinom(prog2 ~ write, data = ml)
summary(myModel) # the standard errors are Wald std errors
carsdata <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/car/car.data",
header=F, # open the url in a web browser to see why we need this
stringsAsFactors=F)  # import string variables as characters not factors.
colnames(carsdata) <- c("buying", "maint", "doors", "persons", "lug_boot", "safety", "class")
head(carsdata)
table(carsdata$class) # our ordinal y variable
carsdata$class <- factor(carsdata$class, levels=c("unacc", "acc", "good", "vgood"), ordered=TRUE) # order it better!
table(carsdata$class) # our ordinal y variable
library(MASS) # for polr()
with(carsdata, table(lug_boot))
m <- polr(class ~ lug_boot, data = carsdata)
summary(m)
require(ggplot2, quietly = T)
ggplot(carsdata, aes(x = class, y = lug_boot)) +
geom_jitter(alpha = .5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
knitr::include_graphics("canonical_links.png")
library(boot)
myDf <- read.csv("candy-data.csv")[,c(2,11)]
myDf[,2] <- logit(myDf[,2])
colnames(myDf)[2] <- "sugar_amount"
myDf <- myDf[order(myDf[,2]),]
mod <- glm(chocolate ~ sugar_amount, family = binomial(link = "logit"), data = myDf)
plot(myDf$sugar_amount, myDf$chocolate)
lines(myDf$sugar_amount, predict(mod, type = "response"), type = "l", col = "red")
points()
predict(mod)
predict(mod, newdata = data.frame(sugar_amount = c(4)))
predict(mod, newdata = data.frame(sugar_amount = c(4)), se.fit = T)
predict(mod, type = "response", newdata = data.frame(sugar_amount = c(4)), se.fit = T)
library(boot)
logit(0.3894894)
logit(0.5961598)
setwd("~/UVa/all_teaching/summer19_6021/presentations/")
library(blogdown)
library(rmarkdown)
render_site()
render_site()
## More Than Two $y$ Outcomes
\begin{gather}
\epsilon_t &= \phi \epsilon_{t-1} + a_t \\
\epsilon_1 &\sim N\left(0, \frac{\sigma^2_a}{1-\phi^2} \right)
\end{gather}
See how the mean and variance stay the same:
x <- seq(-10,10)
y <- 3 - 2*x + .01*x^2 + rnorm(n = length(x), mean = 0, sd = 4)
plot(x,y)
abline(lm(y ~ x))
plot(residuals(lm(y ~ x)), type ="b")
acf(residuals(lm(y ~ x)), type ="b")
y
x
acf(residuals(lm(y ~ x)))
arima.sim
?arima.sim
## Correlated Errors
If there's a missing regressor that you can find, that's probably the easiest way to fix this, but if not, you might want to stop assuming the errors are independent.
library(lmtest)
install.packages("lmtest")
library(lmtest)
?dwtest
?arima
setwd("~/UVa/all_teaching/summer19_6021/presentations/")
render_site()
