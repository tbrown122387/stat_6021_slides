betas <- c(-1,2,-3)
x <- seq(-3,3,.1)
y_line <- cbind(x,x^2,x^3) %*% betas
y <- y_line +  rnorm(n = length(x), sd = 20)
plot(x,y)
points(x,y_line, col="red", type = "l")
plotSurface <- function(lowerFirst, upperFirst,
lowerSecond, upperSecond,
numGridPointsOnEachAxis, f, contour = F, ...){
A <- seq(lowerFirst, upperFirst, length.out = numGridPointsOnEachAxis)
B <- seq(lowerSecond, upperSecond, length.out = numGridPointsOnEachAxis)
args <- expand.grid(A,B)
z <- mapply(f, args[,1], args[,2])
dim(z) <- c(length(A), length(B))
if(contour){
contour(A, B, z)
}else{
persp(x=A, y=B, z=z, ...)
}
}
eval_mean <- function(x1, x2) -2 + 3*x1 - .2*x2 - 4*x1*x2
plotSurface(-5, 5, -5, 5, 50,
eval_mean, F, theta=-120,
zlab = "E[y]", xlab = "x1", ylab = "x2")
plotSurface <- function(lowerFirst, upperFirst,
lowerSecond, upperSecond,
numGridPointsOnEachAxis, f, contour = F, ...){
A <- seq(lowerFirst, upperFirst, length.out = numGridPointsOnEachAxis)
B <- seq(lowerSecond, upperSecond, length.out = numGridPointsOnEachAxis)
args <- expand.grid(A,B)
z <- mapply(f, args[,1], args[,2])
dim(z) <- c(length(A), length(B))
if(contour){
contour(A, B, z)
}else{
persp(x=A, y=B, z=z, ...)
}
}
eval_mean <- function(x1, x2) -2 + 3*x1 - .2*x2 - 4*x1*x2
plotSurface(-5, 5, -5, 5, 50,
eval_mean, T, theta=-120,
zlab = "E[y]", xlab = "x1", ylab = "x2")
plotSurface <- function(lowerFirst, upperFirst,
lowerSecond, upperSecond,
numGridPointsOnEachAxis, f, contour = F, ...){
A <- seq(lowerFirst, upperFirst, length.out = numGridPointsOnEachAxis)
B <- seq(lowerSecond, upperSecond, length.out = numGridPointsOnEachAxis)
args <- expand.grid(A,B)
z <- mapply(f, args[,1], args[,2])
dim(z) <- c(length(A), length(B))
if(contour){
contour(A, B, z)
}else{
persp(x=A, y=B, z=z, ...)
}
}
eval_mean <- function(x1, x2) (800+10*x1 + 7*x2+ 8.5*x1^2+ -5*x2^2+ 4*x1*x2)
plotSurface(0, 10, 0, 10, 50,
eval_mean, F, theta=-50,
zlab = "E[y]", xlab = "x1", ylab = "x2")
x <- seq(-10,10,1)
my_df <- data.frame(y = (3 + 2*x - 5*x^2) + rnorm(length(x), sd = 30), x = x)
head(my_df)
plot(my_df$x, my_df$y)
my_df$xsquared <- x^2
mlr_model <- lm(y ~ x + xsquared, data=my_df)
# mlr_model <- lm(y ~ . + xsquared, data=my_df) # . means "all other columns"
summary(mlr_model)
fitted_vals <- predict(mlr_model)
plot(my_df$x, my_df$y)
points(my_df$x, fitted_vals, col = "red", type ="l")
knitr::include_graphics("/home/t/UVa/all_teaching/summer19_6021/presentations/module3/screenshot.png")
# knitr::include_graphics("screenshot.png")
anova(mlr_model)
names(anova(mlr_model))
anova(mlr_model)$'Mean Sq'
anova(mlr_model)$'Mean Sq'[3]
# define a function
getSSHat <- function(model_object){
return(anova(model_object)$'Mean Sq'[3])
}
# use/call the function on a specific model
getSSHat(mlr_model)
x1 <- c(2,3,4,1,5,6,7,8)
x2 <- c(1,2,5,2,6,4,3,4)
y <- 8 - 5*x1 + 12*x2 + .01*rnorm(n = length(x1))
pairs(data.frame(y,x1,x2))
summary(mlr_model)
head(my_df)
aov(mlr_model)
?anova
?anova.lm
betas <- c(-1,2,-3)
x <- seq(-3,3,.1)
y_line <- cbind(x,x^2,x^3) %*% betas
y <- y_line +  rnorm(n = length(x), sd = 20)
plot(x,y)
points(x,y_line, col="red", type = "l")
plotSurface <- function(lowerFirst, upperFirst,
lowerSecond, upperSecond,
numGridPointsOnEachAxis, f, contour = F, ...){
A <- seq(lowerFirst, upperFirst, length.out = numGridPointsOnEachAxis)
B <- seq(lowerSecond, upperSecond, length.out = numGridPointsOnEachAxis)
args <- expand.grid(A,B)
z <- mapply(f, args[,1], args[,2])
dim(z) <- c(length(A), length(B))
if(contour){
contour(A, B, z)
}else{
persp(x=A, y=B, z=z, ...)
}
}
eval_mean <- function(x1, x2) -2 + 3*x1 - .2*x2 - 4*x1*x2
plotSurface(-5, 5, -5, 5, 50,
eval_mean, F, theta=-120,
zlab = "E[y]", xlab = "x1", ylab = "x2")
plotSurface <- function(lowerFirst, upperFirst,
lowerSecond, upperSecond,
numGridPointsOnEachAxis, f, contour = F, ...){
A <- seq(lowerFirst, upperFirst, length.out = numGridPointsOnEachAxis)
B <- seq(lowerSecond, upperSecond, length.out = numGridPointsOnEachAxis)
args <- expand.grid(A,B)
z <- mapply(f, args[,1], args[,2])
dim(z) <- c(length(A), length(B))
if(contour){
contour(A, B, z)
}else{
persp(x=A, y=B, z=z, ...)
}
}
eval_mean <- function(x1, x2) -2 + 3*x1 - .2*x2 - 4*x1*x2
plotSurface(-5, 5, -5, 5, 50,
eval_mean, T, theta=-120,
zlab = "E[y]", xlab = "x1", ylab = "x2")
plotSurface <- function(lowerFirst, upperFirst,
lowerSecond, upperSecond,
numGridPointsOnEachAxis, f, contour = F, ...){
A <- seq(lowerFirst, upperFirst, length.out = numGridPointsOnEachAxis)
B <- seq(lowerSecond, upperSecond, length.out = numGridPointsOnEachAxis)
args <- expand.grid(A,B)
z <- mapply(f, args[,1], args[,2])
dim(z) <- c(length(A), length(B))
if(contour){
contour(A, B, z)
}else{
persp(x=A, y=B, z=z, ...)
}
}
eval_mean <- function(x1, x2) (800+10*x1 + 7*x2+ 8.5*x1^2+ -5*x2^2+ 4*x1*x2)
plotSurface(0, 10, 0, 10, 50,
eval_mean, F, theta=-50,
zlab = "E[y]", xlab = "x1", ylab = "x2")
x <- seq(-10,10,1)
my_df <- data.frame(y = (3 + 2*x - 5*x^2) + rnorm(length(x), sd = 30), x = x)
head(my_df)
plot(my_df$x, my_df$y)
my_df$xsquared <- x^2
mlr_model <- lm(y ~ x + xsquared, data=my_df)
# mlr_model <- lm(y ~ . + xsquared, data=my_df) # . means "all other columns"
summary(mlr_model)
fitted_vals <- predict(mlr_model)
plot(my_df$x, my_df$y)
points(my_df$x, fitted_vals, col = "red", type ="l")
knitr::include_graphics("/home/t/UVa/all_teaching/summer19_6021/presentations/module3/screenshot.png")
# knitr::include_graphics("screenshot.png")
anova(mlr_model)
names(anova(mlr_model))
anova(mlr_model)$'Mean Sq'
anova(mlr_model)$'Mean Sq'[3]
# define a function
getSSHat <- function(model_object){
return(anova(model_object)$'Mean Sq'[3])
}
# use/call the function on a specific model
getSSHat(mlr_model)
x1 <- c(2,3,4,1,5,6,7,8)
x2 <- c(1,2,5,2,6,4,3,4)
y <- 8 - 5*x1 + 12*x2 + .01*rnorm(n = length(x1))
pairs(data.frame(y,x1,x2))
summary(mlr_model)
summary(mlr_model)
anova(mlr_model)
lil_mod <- lm(y ~ x, data = my_df)
big_mod <- lm(y ~ x + xsquared, data=my_df)
anova(lil_mod, big_mod) # smallest to largest
# by hand:
(getSSHat(full_mod)/(nrow(my_df)-2-1))/(getSSHat(full_mod)/(nrow(my_df)-2-1))
names(anova(lil_mod, big_mod))
str(anova(lil_mod, big_mod))
?predict.lm
head(my_df)
